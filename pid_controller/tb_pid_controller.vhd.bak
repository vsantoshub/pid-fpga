
library ieee;                                               
use ieee.std_logic_1164.all;                                
use ieee.numeric_std.all;

entity tb_pid_controller is
end tb_pid_controller;
architecture behavioral of tb_pid_controller is

-- constants   
constant const_n_pwm_res : positive := 8;
constant const_n_arithmetics_width : positive := 32;      
constant const_n_pps_interrupt_counter : positive := 32;      
constant const_n_max_rpm : positive := 32;      
constant const_n_max_delay : positive := 8;      
constant const_n_cmd_width : positive := 2;      

--frequency to generate an interrupt equivalent to 1s in real use (50e6)
constant counter_1kHz : unsigned(const_n_arithmetics_width-1 downto 0) := to_unsigned(50_000, const_n_pps_interrupt_counter);    
constant clk_period : time := 20 ns;          
constant motor_period : time := 735 ns; --double this to get motor real period (generates 680 pulses in 1s)

--  input signals                                                   
signal clk_sig : std_logic;
signal rst_sig : std_logic := '0';

signal encoder_count_sig:std_logic_vector(const_n_arithmetics_width-1 downto 0):= (others => '0');
signal encoder_in_sig : std_logic := '0';

signal user_rpm_sig : std_logic_vector(const_n_arithmetics_width-1 downto 0) := (others => '0');
signal pps_interrupt_in_sig :std_logic_vector(const_n_pps_interrupt_counter-1 downto 0) := (others => '0');

signal cmd_sig:  std_logic_vector(const_n_cmd_width-1 downto 0) := (others=>'0');
signal current_rpm_sig : std_logic_vector(const_n_arithmetics_width-1 downto 0) := (others => '0');
signal pid_out_sig : std_logic_vector(const_n_arithmetics_width - 1 downto 0) := (others => '0');
signal pwm_out_sig : std_logic :='0'; 
signal state_debug_sig: std_logic_vector(7 downto 0) := (others =>'0');
signal operational_error_sig :  std_logic :='0';

component pid_controller 

generic (
       n_pps_interrupt_counter : positive := const_n_pps_interrupt_counter;
       n_max_rpm : positive := const_n_max_rpm; --max: 71400 -> 210 rpm
		 n_arithmetics_width: positive := const_n_arithmetics_width;
		 n_pwm_res : positive := const_n_pwm_res;
		 n_max_delay: positive := const_n_max_delay;
		 n_cmd_width: positive := const_n_cmd_width
); 
port (
	--common
	clk, rst : in std_logic;
	
	--inputs
	cmd: in std_logic_vector(n_cmd_width-1 downto 0);
	user_rpm: in std_logic_vector(n_arithmetics_width-1 downto 0);
	encoder_in: in std_logic;
	pps_interrupt_in : in std_logic_vector(n_arithmetics_width-1 downto 0);

	--debug output
	encoder_count: out std_logic_vector(n_max_rpm-1 downto 0);
	current_rpm : out std_logic_vector(n_max_rpm - 1 downto 0);
	pid_out: out std_logic_vector(n_arithmetics_width-1 downto 0);
	state_debug: out std_logic_vector(7 downto 0);
	
	--block outputs
	operational_error : out std_logic;
	pwm_out: out std_logic
);
end component;


begin
	pid_controller_inst : pid_controller
	generic map (
       n_pps_interrupt_counter => const_n_pps_interrupt_counter,
       n_max_rpm  => const_n_max_rpm,
		 n_arithmetics_width  => const_n_arithmetics_width,
		 n_pwm_res  => const_n_pwm_res,
		 n_max_delay  => const_n_max_delay,
		 n_cmd_width  => const_n_cmd_width
	)
	
	port map (
	--common
	clk  => clk_sig,
	rst  => rst_sig,
	
	--inputs
	cmd  => cmd_sig,
	user_rpm  => user_rpm_sig,
	encoder_in  => encoder_in_sig,
	pps_interrupt_in => pps_interrupt_in_sig,

	--debug output
	encoder_count  => encoder_count_sig,
	current_rpm  => current_rpm_sig,
	pid_out  => pid_out_sig,
	state_debug  => state_debug_sig,
	
	--block outputs
	operational_error  => operational_error_sig,
	pwm_out => pwm_out_sig
			
);

    clk_proc : process 
    begin
        clk_sig <= '0';
        wait for clk_period/2;
        clk_sig <= '1';
        wait for clk_period/2;
    end process clk_proc;           

	 encoder_pulses_proc : process 
    begin
        encoder_in_sig <= '0';
        wait for motor_period;
        encoder_in_sig <= '1';
        wait for motor_period;
    end process encoder_pulses_proc;     
	 
    stim_proc : process                                              
                                    
    begin 
		  rst_sig <= '1'; 
		  wait for clk_period;

		  rst_sig <= '0';		  
 		  wait for 2*clk_period;
  		  user_rpm_sig <= "01000011001010100000000000000000"; --170 rpm
		  wait for clk_period;
		  cmd_sig <= "01";
		  wait for clk_period;
		  pps_interrupt_in_sig <= std_logic_vector(counter_1kHz); --1ms
		  wait for clk_period;
		  cmd_sig <= "10";
		  wait for clk_period;
		  cmd_sig <= "11";
		  
    wait;                                                        
    end process stim_proc; 
  
end behavioral;

